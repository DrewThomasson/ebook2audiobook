name: Conditional Test Ubuntu Headless

on:
  push:
    branches:
      - act-trigger
  workflow_dispatch:
    inputs:
      test_group:
        description: 'Select test group to run'
        type: choice
        options:
          - all
          - english_fairseq
          - unusual_fairseq
          - english_vits_yourtts
          - default_xtts
          - custom
        default: 'all'
      custom_tests:
        description: 'Custom test selection (comma-separated, e.g.: eng_fairseq_single,eng_vits_single)'
        type: string
        required: false
        default: ''

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      test_matrix: ${{ steps.set-matrix.outputs.test_matrix }}
    steps:
      - id: set-matrix
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            case "${{ github.event.inputs.test_group }}" in
              "all")
                echo "test_matrix=[\"eng_fairseq_single\",\"eng_fairseq_batch\",\"eng_fairseq_custom_voice\",\"unusual_fairseq_single\",\"unusual_fairseq_custom_voice\",\"eng_vits_single\",\"eng_vits_custom_voice\",\"eng_yourtts_single\",\"eng_yourtts_custom_voice\",\"default_single\",\"default_xtts_custom_voice\"]" >> $GITHUB_OUTPUT
                ;;
              "english_fairseq")
                echo "test_matrix=[\"eng_fairseq_single\",\"eng_fairseq_batch\",\"eng_fairseq_custom_voice\"]" >> $GITHUB_OUTPUT
                ;;
              "unusual_fairseq")
                echo "test_matrix=[\"unusual_fairseq_single\",\"unusual_fairseq_custom_voice\"]" >> $GITHUB_OUTPUT
                ;;
              "english_vits_yourtts")
                echo "test_matrix=[\"eng_vits_single\",\"eng_vits_custom_voice\",\"eng_yourtts_single\",\"eng_yourtts_custom_voice\"]" >> $GITHUB_OUTPUT
                ;;
              "default_xtts")
                echo "test_matrix=[\"default_single\",\"default_xtts_custom_voice\"]" >> $GITHUB_OUTPUT
                ;;
              "custom")
                # Parse comma-separated list into a proper JSON array
                CUSTOM_TESTS="${{ github.event.inputs.custom_tests }}"
                if [[ -z "$CUSTOM_TESTS" ]]; then
                  echo "test_matrix=[]" >> $GITHUB_OUTPUT
                else
                  # Convert comma-separated string to JSON array
                  JSON_ARRAY=$(echo "$CUSTOM_TESTS" | sed 's/,/","/g')
                  echo "test_matrix=[\"$JSON_ARRAY\"]" >> $GITHUB_OUTPUT
                fi
                ;;
            esac
          else
            # For push events, run all tests
            echo "test_matrix=[\"eng_fairseq_single\",\"eng_fairseq_batch\",\"eng_fairseq_custom_voice\",\"unusual_fairseq_single\",\"unusual_fairseq_custom_voice\",\"eng_vits_single\",\"eng_vits_custom_voice\",\"eng_yourtts_single\",\"eng_yourtts_custom_voice\",\"default_single\",\"default_xtts_custom_voice\"]" >> $GITHUB_OUTPUT
          fi

  run-tests:
    needs: setup
    if: ${{ fromJson(needs.setup.outputs.test_matrix)[0] != null }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test: ${{ fromJson(needs.setup.outputs.test_matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Check Python version
        run: python --version
        
      - name: Install the system packages
        run: |
          sudo apt-get update &&
          sudo apt-get install -y gcc g++ make wget git calibre ffmpeg nodejs espeak espeak-ng rustc cargo libmecab-dev mecab mecab-ipadic-utf8 curl libsndfile1-dev libc-dev sox &&
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo bash - &&
          sudo apt-get install -y nodejs &&
          sudo apt-get clean &&
          sudo rm -rf /var/lib/apt/lists/*

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install the python requirements
        run: |
          python -m pip install --upgrade pip
          pip cache purge
          pip install -r requirements.txt

      - name: pip Install unict
        run: pip install unidic-lite unidic

      - name: Download the unict dictionary
        run: |
          python -m unidic download
          mkdir -p ~/.local/share/unidic

      - name: Set UniDic environment variable
        run: echo "UNIDIC_DIR=$HOME/.local/share/unidic" >> $GITHUB_ENV

      - name: Help command python app.py
        run: python app.py --help

      - name: Create test files
        run: |
          mkdir -p tools/workflow-testing
          CONTENT=$'"This is a test sentence," she said. "Here'\''s another one."\nThe quick brown fox jumps over the lazy dog, but the cat stays still.\nNumbers like 123,456.78 should also be tested.\nWhat happens if we use question marks? Or exclamation points!\n"Nested quotes are '\''interesting'\''," he noted.'
          echo -e "$CONTENT" > tools/workflow-testing/test1.txt
          echo -e "$CONTENT" > tools/workflow-testing/test2.txt
          echo -e "$CONTENT" > tools/workflow-testing/test3.txt
          echo -e "$CONTENT" > tools/workflow-testing/test4.txt
          echo -e "$CONTENT" > tools/workflow-testing/test5.txt

      # English Fairseq single test
      - name: English Fairseq headless single test
        if: ${{ matrix.test == 'eng_fairseq_single' }}
        run: python app.py --headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine fairseq

      # English Fairseq batch test
      - name: English Fairseq headless batch test
        if: ${{ matrix.test == 'eng_fairseq_batch' }}
        run: python app.py --headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine fairseq

      # English Fairseq Custom-Voice single test
      - name: English Fairseq Custom-Voice headless single test
        if: ${{ matrix.test == 'eng_fairseq_custom_voice' }}
        run: python app.py --headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine fairseq --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"

      # Unusual Fairseq single test
      - name: Wipe models/tts folder before unusual fairseq test
        if: ${{ matrix.test == 'unusual_fairseq_single' }}
        run: rm -rf models/tts/*

      - name: Unusual Fairseq headless single test
        if: ${{ matrix.test == 'unusual_fairseq_single' }}
        run: python app.py --headless --script_mode full_docker --language urd-script_devanagari --ebook "tools/workflow-testing/test1.txt" --tts_engine fairseq

      # Unusual Fairseq Custom-Voice single test
      - name: Wipe models/tts folder before unusual fairseq custom voice test
        if: ${{ matrix.test == 'unusual_fairseq_custom_voice' }}
        run: rm -rf models/tts/*

      - name: Unusual Fairseq Custom-Voice headless single test
        if: ${{ matrix.test == 'unusual_fairseq_custom_voice' }}
        run: python app.py --headless --script_mode full_docker --language urd-script_devanagari --ebook "tools/workflow-testing/test1.txt" --tts_engine fairseq --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"

      # English Vits single test
      - name: Wipe models/tts folder before vits test
        if: ${{ matrix.test == 'eng_vits_single' }}
        run: rm -rf models/tts/*

      - name: English Vits headless single test
        if: ${{ matrix.test == 'eng_vits_single' }}
        run: python app.py --headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine vits

      # English Vits Custom-Voice single test
      - name: Wipe models/tts folder before vits custom voice test
        if: ${{ matrix.test == 'eng_vits_custom_voice' }}
        run: rm -rf models/tts/*

      - name: English Vits Custom-Voice headless single test
        if: ${{ matrix.test == 'eng_vits_custom_voice' }}
        run: python app.py --headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine vits --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"

      # English Yourtts single test
      - name: Wipe models/tts folder before yourtts test
        if: ${{ matrix.test == 'eng_yourtts_single' }}
        run: rm -rf models/tts/*

      - name: English Yourtts headless single test
        if: ${{ matrix.test == 'eng_yourtts_single' }}
        run: python app.py --headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine yourtts

      # English Yourtts Custom-Voice single test
      - name: Wipe models/tts folder before yourtts custom voice test
        if: ${{ matrix.test == 'eng_yourtts_custom_voice' }}
        run: rm -rf models/tts/*

      - name: English Yourtts Custom-Voice headless single test
        if: ${{ matrix.test == 'eng_yourtts_custom_voice' }}
        run: python app.py --headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine yourtts --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"

      # Default single test
      - name: Wipe models/tts folder before default test
        if: ${{ matrix.test == 'default_single' }}
        run: rm -rf models/tts/*

      - name: Default headless single test
        if: ${{ matrix.test == 'default_single' }}
        run: python app.py --headless --script_mode full_docker --ebook "tools/workflow-testing/test1.txt"

      # Default xtts Custom-Voice single test
      - name: Wipe models/tts folder before default xtts custom voice test
        if: ${{ matrix.test == 'default_xtts_custom_voice' }}
        run: rm -rf models/tts/*

      - name: Default xtts headless Custom-Voice single test
        if: ${{ matrix.test == 'default_xtts_custom_voice' }}
        run: python app.py --headless --script_mode full_docker --ebook "tools/workflow-testing/test1.txt" --tts_engine xtts --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"
