name: lite test
on:
  workflow_dispatch:
    inputs:
      docker_tag:
        description: 'Docker tag to use for testing'
        required: false
        default: 'lite_dev_v25'
        type: string
      tts_engine:
        description: 'TTS Engine to use'
        required: false
        default: 'fairseq'
        type: choice
        options:
          - all
          - fairseq
          - vits
          - yourtts
          - xtts
          - bark
      mode:
        description: 'Processing mode'
        required: false
        default: 'single'
        type: choice
        options:
          - all
          - single
          - batch
      use_custom_voice:
        description: 'Use custom voice'
        required: false
        default: 'false'
        type: choice
        options:
          - all
          - true
          - false
      language:
        description: 'Language code'
        required: false
        default: 'eng'
        type: choice
        options:
          - all
          - eng
          - urd-script_devanagari
      run_help_test:
        description: 'Run help command test'
        required: false
        default: 'true'
        type: boolean

jobs:
  build:
    runs-on: [self-hosted, Linux, ARM64]
    env:
      DOCKER_TAG: ${{ inputs.docker_tag || 'lite_dev_v25' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker Buildx conditionally based on OS
      - name: Set up Docker Buildx (Windows)
        if: runner.os == 'Windows'
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker Buildx (Unix)
        if: runner.os != 'Windows'
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          buildkitd-flags: --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Get Git Commit Hash
      - name: Get Git Commit Hash
        id: git_hash
        run: echo "GIT_HASH=$(git rev-parse --short=9 HEAD)" >> $GITHUB_ENV
        shell: bash

      # Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          docker buildx build --platform linux/arm64 \
            --build-arg SKIP_XTTS_TEST=true \
            -t ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ env.DOCKER_TAG }} \
            --push .
        shell: bash

  run_tests:
    needs: build
    runs-on: [self-hosted, Linux, ARM64]
    env:
      DOCKER_TAG: ${{ inputs.docker_tag || 'lite_dev_v25' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Prune all dangling Docker images
        run: docker image prune -f
      
      - name: Setup test params
        id: test_params
        run: |
          # Create test configurations based on parameters
          
          # Help test if enabled
          if [[ "${{ inputs.run_help_test }}" == "true" ]]; then
            TESTS+=("Help command test|--help")
          fi
          
          # Define parameters for the test matrix
          ENGINES=("fairseq" "vits" "yourtts" "xtts" "bark")
          MODES=("single" "batch")
          VOICES=("default" "custom")
          LANGS=("eng" "urd-script_devanagari")
          
          # Filter based on input parameters
          if [[ "${{ inputs.tts_engine }}" != "all" ]]; then
            ENGINES=("${{ inputs.tts_engine }}")
          fi
          
          if [[ "${{ inputs.mode }}" != "all" ]]; then
            MODES=("${{ inputs.mode }}")
          fi
          
          if [[ "${{ inputs.use_custom_voice }}" != "all" ]]; then
            if [[ "${{ inputs.use_custom_voice }}" == "true" ]]; then
              VOICES=("custom")
            else
              VOICES=("default")
            fi
          fi
          
          if [[ "${{ inputs.language }}" != "all" ]]; then
            LANGS=("${{ inputs.language }}")
          fi
          
          # Generate tests based on combinations
          for ENGINE in "${ENGINES[@]}"; do
            for MODE in "${MODES[@]}"; do
              for VOICE in "${VOICES[@]}"; do
                for LANG in "${LANGS[@]}"; do
                  NAME="${LANG} ${ENGINE} headless"
                  if [[ "$VOICE" == "custom" ]]; then
                    NAME="${NAME} Custom-Voice"
                  fi
                  NAME="${NAME} ${MODE} test"
                  
                  CMD="--headless --script_mode full_docker --language ${LANG}"
                  
                  if [[ "$MODE" == "single" ]]; then
                    CMD="${CMD} --ebook \"tools/workflow-testing/test1.txt\""
                  else
                    CMD="${CMD} --ebooks_dir \"tools/workflow-testing\""
                  fi
                  
                  CMD="${CMD} --tts_engine ${ENGINE}"
                  
                  if [[ "$VOICE" == "custom" ]]; then
                    CMD="${CMD} --voice \"voices/eng/elder/male/DavidAttenborough_24000.wav\""
                  fi
                  
                  TESTS+=("${NAME}|${CMD}")
                done
              done
            done
          done
          
          # Add special XTTS fine-tuned tests if XTTS is included
          if [[ "${{ inputs.tts_engine }}" == "all" || "${{ inputs.tts_engine }}" == "xtts" ]]; then
            if [[ "${{ inputs.mode }}" == "all" || "${{ inputs.mode }}" == "single" ]]; then
              if [[ "${{ inputs.language }}" == "all" || "${{ inputs.language }}" == "eng" ]]; then
                TESTS+=("English XTTS headless fine-tuned XTTS model single test|--headless --script_mode full_docker --language eng --ebook \"tools/workflow-testing/test1.txt\" --tts_engine xtts --fine_tuned AiExplained")
              fi
            fi
            
            if [[ "${{ inputs.mode }}" == "all" || "${{ inputs.mode }}" == "batch" ]]; then
              if [[ "${{ inputs.language }}" == "all" || "${{ inputs.language }}" == "eng" ]]; then
                TESTS+=("English XTTS headless fine-tuned XTTS model batch test|--headless --script_mode full_docker --language eng --ebooks_dir \"tools/workflow-testing\" --tts_engine xtts --fine_tuned AiExplained")
              fi
            fi
          fi
          
          echo "TESTS=${#TESTS[@]}" >> $GITHUB_ENV
          
          # Save tests to a file for use in next steps
          for i in "${!TESTS[@]}"; do
            echo "${TESTS[$i]}" >> test_list.txt
          done
        shell: bash
      
      - name: Run all tests
        run: |
          while IFS="|" read -r NAME CMD; do
            echo "Running test: $NAME"
            echo "Command: $CMD"
            # First try with GPU
            set +e
            eval "docker run --rm --pull=always --gpus all ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ env.DOCKER_TAG }} $CMD"
            STATUS=$?
            set -e
            
            # If GPU run failed, try without GPU
            if [ $STATUS -ne 0 ]; then
              echo "GPU run failed, trying without GPU support..."
              eval "docker run --rm --pull=always ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ env.DOCKER_TAG }} $CMD"
            fi
            
            # Prune images between tests to save space
            docker image prune -f
          done < test_list.txt
        shell: bash
