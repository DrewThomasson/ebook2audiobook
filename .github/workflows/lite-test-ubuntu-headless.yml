name: lite Ubuntu Headless
on:
  workflow_dispatch:
    inputs:
      tts_engine:
        description: 'TTS Engine to use'
        required: true
        default: 'xtts'
        type: choice
        options:
          - fairseq
          - vits
          - yourtts
          - xtts
      mode:
        description: 'Processing mode'
        required: true
        default: 'single'
        type: choice
        options:
          - single
          - batch
      use_custom_voice:
        description: 'Use custom voice'
        required: true
        default: 'false'
        type: boolean
      use_xtts_zip_mode:
        description: 'Use XTTS model in zip mode (only applies when TTS engine is XTTS)'
        required: true
        default: 'false'
        type: boolean
      language:
        description: 'Language code'
        required: true
        default: 'eng'
        type: string
jobs:
  run-tts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update &&
          sudo apt-get install -y gcc g++ make wget git calibre ffmpeg nodejs espeak espeak-ng rustc cargo libmecab-dev mecab mecab-ipadic-utf8 curl libsndfile1-dev libc-dev sox &&
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo bash - &&
          sudo apt-get install -y nodejs &&
          sudo apt-get clean &&
          sudo rm -rf /var/lib/apt/lists/*
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install Python requirements
        run: |
          python -m pip install --upgrade pip
          pip cache purge
          pip install -r requirements.txt
      - name: Install unict
        run: pip install unidic-lite unidic
      - name: Download unict dictionary
        run: |
          python -m unidic download
          mkdir -p ~/.local/share/unidic
      - name: Set UniDic environment variable
        run: echo "UNIDIC_DIR=$HOME/.local/share/unidic" >> $GITHUB_ENV
      
      # Debug step to see input values
      - name: Debug input values
        run: |
          echo "TTS Engine: ${{ inputs.tts_engine }}"
          echo "Mode: ${{ inputs.mode }}"
          echo "Use Custom Voice: ${{ inputs.use_custom_voice }}"
          echo "Use XTTS Zip Mode: ${{ inputs.use_xtts_zip_mode }}"
          echo "Language: ${{ inputs.language }}"
      
      # Download XTTS model if using zip mode
      - name: Download XTTS model for zip mode
        if: ${{ inputs.tts_engine == 'xtts' && inputs.use_xtts_zip_mode == 'true' }}
        run: python app.py --headless --script_mode full_docker --ebook "tools/workflow-testing/test1.txt"
      
      # Create zip file for XTTS if using zip mode
      - name: Create the custom_xtts_test.zip
        if: ${{ inputs.tts_engine == 'xtts' && inputs.use_xtts_zip_mode == 'true' }}
        run: |
          cp voices/eng/elder/male/DavidAttenborough_24000.wav ref.wav
          zip -j custom_xtts_test.zip models/tts/tts_models--multilingual--multi-dataset--xtts_v2/config.json models/tts/tts_models--multilingual--multi-dataset--xtts_v2/model.pth models/tts/tts_models--multilingual--multi-dataset--xtts_v2/vocab.json ref.wav
          rm -f ref.wav
      
      # Clean models folder if using zip mode
      - name: Wipe models/tts folder for zip mode
        if: ${{ inputs.tts_engine == 'xtts' && inputs.use_xtts_zip_mode == 'true' }}
        run: rm -rf models/tts/*
      
      # Type conversion step - GitHub Actions inputs are strings, even booleans
      - name: Convert input types
        id: convert
        run: |
          echo "IS_SINGLE=${{ inputs.mode == 'single' }}" >> $GITHUB_OUTPUT
          echo "IS_BATCH=${{ inputs.mode == 'batch' }}" >> $GITHUB_OUTPUT
          echo "USE_CUSTOM_VOICE=${{ inputs.use_custom_voice == 'true' }}" >> $GITHUB_OUTPUT
          echo "USE_XTTS_ZIP_MODE=${{ inputs.use_xtts_zip_mode == 'true' }}" >> $GITHUB_OUTPUT
          echo "IS_XTTS=${{ inputs.tts_engine == 'xtts' }}" >> $GITHUB_OUTPUT
          echo "LANGUAGE=${{ inputs.language }}" >> $GITHUB_OUTPUT
      
      # Normal run steps for non-zip mode
      - name: Run Single Mode with Default Voice (non-zip mode)
        if: ${{ steps.convert.outputs.IS_SINGLE == 'true' && steps.convert.outputs.USE_CUSTOM_VOICE == 'false' && !(steps.convert.outputs.IS_XTTS == 'true' && steps.convert.outputs.USE_XTTS_ZIP_MODE == 'true') }}
        run: |
          echo "Running Single Mode with Default Voice for ${{ inputs.tts_engine }}"
          python app.py --headless --script_mode full_docker --language ${{ inputs.language }} --ebook "tools/workflow-testing/test1.txt" --tts_engine ${{ inputs.tts_engine }}
      
      - name: Run Batch Mode with Default Voice (non-zip mode)
        if: ${{ steps.convert.outputs.IS_BATCH == 'true' && steps.convert.outputs.USE_CUSTOM_VOICE == 'false' && !(steps.convert.outputs.IS_XTTS == 'true' && steps.convert.outputs.USE_XTTS_ZIP_MODE == 'true') }}
        run: |
          echo "Running Batch Mode with Default Voice for ${{ inputs.tts_engine }}"
          python app.py --headless --script_mode full_docker --language ${{ inputs.language }} --ebooks_dir "tools/workflow-testing" --tts_engine ${{ inputs.tts_engine }}
      
      - name: Run Single Mode with Custom Voice (non-zip mode)
        if: ${{ steps.convert.outputs.IS_SINGLE == 'true' && steps.convert.outputs.USE_CUSTOM_VOICE == 'true' && !(steps.convert.outputs.IS_XTTS == 'true' && steps.convert.outputs.USE_XTTS_ZIP_MODE == 'true') }}
        run: |
          echo "Running Single Mode with Custom Voice for ${{ inputs.tts_engine }}"
          python app.py --headless --script_mode full_docker --language ${{ inputs.language }} --ebook "tools/workflow-testing/test1.txt" --tts_engine ${{ inputs.tts_engine }} --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"
      
      - name: Run Batch Mode with Custom Voice (non-zip mode)
        if: ${{ steps.convert.outputs.IS_BATCH == 'true' && steps.convert.outputs.USE_CUSTOM_VOICE == 'true' && !(steps.convert.outputs.IS_XTTS == 'true' && steps.convert.outputs.USE_XTTS_ZIP_MODE == 'true') }}
        run: |
          echo "Running Batch Mode with Custom Voice for ${{ inputs.tts_engine }}"
          python app.py --headless --script_mode full_docker --language ${{ inputs.language }} --ebooks_dir "tools/workflow-testing" --tts_engine ${{ inputs.tts_engine }} --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"
      
      # Zip mode run steps
      - name: Run Single Mode with Default Voice (zip mode)
        if: ${{ steps.convert.outputs.IS_SINGLE == 'true' && steps.convert.outputs.USE_CUSTOM_VOICE == 'false' && steps.convert.outputs.IS_XTTS == 'true' && steps.convert.outputs.USE_XTTS_ZIP_MODE == 'true' }}
        run: |
          echo "Running Single Mode with Default Voice for XTTS (zip mode)"
          python app.py --headless --script_mode full_docker --language ${{ inputs.language }} --ebook "tools/workflow-testing/test1.txt" --tts_engine xtts --custom_model "custom_xtts_test.zip"
      
      - name: Run Batch Mode with Default Voice (zip mode)
        if: ${{ steps.convert.outputs.IS_BATCH == 'true' && steps.convert.outputs.USE_CUSTOM_VOICE == 'false' && steps.convert.outputs.IS_XTTS == 'true' && steps.convert.outputs.USE_XTTS_ZIP_MODE == 'true' }}
        run: |
          echo "Running Batch Mode with Default Voice for XTTS (zip mode)"
          python app.py --headless --script_mode full_docker --language ${{ inputs.language }} --ebooks_dir "tools/workflow-testing" --tts_engine xtts --custom_model "custom_xtts_test.zip"
      
      - name: Run Single Mode with Custom Voice (zip mode)
        if: ${{ steps.convert.outputs.IS_SINGLE == 'true' && steps.convert.outputs.USE_CUSTOM_VOICE == 'true' && steps.convert.outputs.IS_XTTS == 'true' && steps.convert.outputs.USE_XTTS_ZIP_MODE == 'true' }}
        run: |
          echo "Running Single Mode with Custom Voice for XTTS (zip mode)"
          python app.py --headless --script_mode full_docker --language ${{ inputs.language }} --ebook "tools/workflow-testing/test1.txt" --tts_engine xtts --custom_model "custom_xtts_test.zip" --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"
      
      - name: Run Batch Mode with Custom Voice (zip mode)
        if: ${{ steps.convert.outputs.IS_BATCH == 'true' && steps.convert.outputs.USE_CUSTOM_VOICE == 'true' && steps.convert.outputs.IS_XTTS == 'true' && steps.convert.outputs.USE_XTTS_ZIP_MODE == 'true' }}
        run: |
          echo "Running Batch Mode with Custom Voice for XTTS (zip mode)"
          python app.py --headless --script_mode full_docker --language ${{ inputs.language }} --ebooks_dir "tools/workflow-testing" --tts_engine xtts --custom_model "custom_xtts_test.zip" --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"
      
      # Clean up zip file
      - name: Delete custom_xtts_test.zip
        if: ${{ inputs.tts_engine == 'xtts' && inputs.use_xtts_zip_mode == 'true' }}
        run: rm -f custom_xtts_test.zip
      
      - name: Upload audiobooks as artifact
        uses: actions/upload-artifact@v4
        with:
          name: audiobooks
          path: audiobooks/
          retention-days: 3
