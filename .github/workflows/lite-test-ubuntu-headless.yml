name: Run Docker and Upload Audiobooks

on:
  workflow_dispatch:
    inputs:
      docker_tag:
        description: "Docker tag to use"
        required: true
        default: "latest"

jobs:
  run-and-upload:
    runs-on: [self-hosted, Linux, ARM64]
    steps:
      - name: Create output directory with proper permissions
        run: |
          mkdir -p /tmp/audiobooks/cli
          chmod 777 -R /tmp/audiobooks
          # Debug check
          ls -la /tmp/audiobooks

      - name: Run Docker container with explicit volume mount
        run: |
          docker run --rm \
            -v "$(pwd)/tmp/audiobooks:/app/audiobooks" \
            ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ github.event.inputs.docker_tag }} \
            --headless --script_mode full_docker \
            --language eng \
            --ebook "tools/workflow-testing/test1.txt" \
            --tts_engine fairseq

      - name: Debug - Check directory contents
        run: |
          echo "=== Current directory contents ==="
          ls -la "$(pwd)/tmp/audiobooks" || echo "Directory not found"
          echo "=== Tmp directory contents ==="
          ls -la /tmp/audiobooks || echo "Directory not found"

      - name: Create ZIP archive and upload
        run: |
          # First try current directory
          if [ -d "$(pwd)/tmp/audiobooks" ] && [ "$(find "$(pwd)/tmp/audiobooks" -type f)" ]; then
            cd "$(pwd)"
            echo "=== Creating ZIP archive from current directory ==="
            zip -r audiobooks.zip tmp/audiobooks
            ARCHIVE_PATH="$(pwd)/audiobooks.zip"
          # Fall back to /tmp if needed
          elif [ -d "/tmp/audiobooks" ] && [ "$(find "/tmp/audiobooks" -type f)" ]; then
            cd "/tmp"
            echo "=== Creating ZIP archive from /tmp directory ==="
            zip -r audiobooks.zip audiobooks
            ARCHIVE_PATH="/tmp/audiobooks.zip"
          else
            echo "❌ No output files found in either location!"
            exit 1
          fi
          
          echo "=== ZIP contents ==="
          unzip -l "$ARCHIVE_PATH"
          
          if [[ -s "$ARCHIVE_PATH" ]]; then
            echo "=== Uploading $(basename "$ARCHIVE_PATH") ==="
            UPLOAD_URL=$(curl -F "file=@$ARCHIVE_PATH" https://0x0.st)
            echo "✅ Upload complete! File available at: $UPLOAD_URL"
          else
            echo "❌ ZIP archive is empty!"
            exit 1
          fi
