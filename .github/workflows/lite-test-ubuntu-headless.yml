name: lite test
on:
  workflow_dispatch:
    inputs:
      docker_tag:
        description: 'Docker tag to use for testing'
        required: false
        default: 'lite_dev_v25'
        type: string
      tts_engine:
        description: 'TTS Engine to use'
        required: false
        default: 'bark'
        type: choice
        options:
          - all
          - fairseq
          - vits
          - yourtts
          - xtts
          - bark
      mode:
        description: 'Processing mode'
        required: false
        default: 'single'
        type: choice
        options:
          - all
          - single
          - batch
      use_custom_voice:
        description: 'Use custom voice'
        required: false
        default: 'false'
        type: choice
        options:
          - all
          - true
          - false
      language:
        description: 'Language code(s) - comma-separated (e.g., eng,spa,fra)'
        required: false
        default: 'eng'
        type: string
      run_help_test:
        description: 'Run help command test'
        required: false
        default: 'true'
        type: boolean
      rebuild_docker:
        description: 'Rebuild Docker image from scratch'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
  push:
    branches:
      - v25
    paths-ignore:
      - CODE_OF_CONDUCT.md
      - LICENSE
      - README.md
      - readme/**
      - dockerfiles/**
      - Notebooks/**

jobs:
  build:
    runs-on: [self-hosted, Linux, ARM64]
    env:
      DOCKER_TAG: ${{ inputs.docker_tag || 'lite_dev_v25' }}
    outputs:
      test_matrix: ${{ steps.generate_matrix.outputs.test_matrix }}
      help_test: ${{ steps.generate_matrix.outputs.help_test }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker Buildx conditionally based on OS
      - name: Set up Docker Buildx (Windows)
        if: runner.os == 'Windows'
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker Buildx (Unix)
        if: runner.os != 'Windows'
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          buildkitd-flags: --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Get Git Commit Hash
      - name: Get Git Commit Hash
        id: git_hash
        run: echo "GIT_HASH=$(git rev-parse --short=9 HEAD)" >> $GITHUB_ENV
        shell: bash

      # Check if we should update existing image or rebuild
      - name: Check for existing image and update if needed
        if: github.event_name == 'workflow_dispatch' && inputs.rebuild_docker == 'false'
        id: check_image
        run: |
          echo "Checking for existing Docker image..."
          if docker pull ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ env.DOCKER_TAG }}; then
            echo "üîÑ Existing image found, updating with latest code instead of rebuilding"
            
            # Create a temporary Dockerfile without using heredoc
            echo "FROM ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ env.DOCKER_TAG }}" > Dockerfile.update
            echo "WORKDIR /app" >> Dockerfile.update
            echo "" >> Dockerfile.update
            echo "# Copy new code over the existing code" >> Dockerfile.update
            echo "COPY . ." >> Dockerfile.update
            
            # Build and push the updated image
            docker buildx build --platform linux/arm64 \
              -t ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ env.DOCKER_TAG }} \
              -f Dockerfile.update \
              --push .
            
            echo "‚úÖ Image updated successfully with latest code"
            echo "rebuild_needed=false" >> $GITHUB_OUTPUT
          else
            echo "‚ùó No existing image found or pull failed, will perform full rebuild"
            echo "rebuild_needed=true" >> $GITHUB_OUTPUT
          fi
        shell: bash


      # Build and Push Docker Image (full rebuild)
      - name: Build and Push Docker Image
        if: github.event_name != 'workflow_dispatch' || inputs.rebuild_docker == 'true' || steps.check_image.outputs.rebuild_needed == 'true'
        run: |
          echo "üèóÔ∏è Building full Docker image from scratch..."
          docker buildx build --platform linux/arm64 \
            --build-arg SKIP_XTTS_TEST=true \
            -t ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ env.DOCKER_TAG }} \
            --push .
          echo "‚úÖ Full image build and push complete"
        shell: bash

      # Generate test matrix directly in the build job
      - name: Generate test matrix
        id: generate_matrix
        run: |
          # Define parameters for the test matrix
          ENGINES=("fairseq" "vits" "yourtts" "xtts" "bark")
          MODES=("single" "batch")
          VOICES=("default" "custom")
          
          # Process language input - split by comma and trim whitespace
          IFS=',' read -ra LANG_ARRAY <<< "${{ inputs.language }}"
          LANGS=()
          for lang in "${LANG_ARRAY[@]}"; do
            # Trim whitespace
            lang=$(echo "$lang" | xargs)
            if [[ -n "$lang" ]]; then
              LANGS+=("$lang")
            fi
          done
          
          # If "all" is specified for language, use the predefined list of languages
          if [[ "${{ inputs.language }}" == "all" ]]; then
            LANGS=("eng" "urd-script_devanagari")
          fi
          
          # If no valid languages provided, default to English
          if [[ ${#LANGS[@]} -eq 0 ]]; then
            LANGS=("eng")
          fi
          
          echo "Languages to test: ${LANGS[*]}"
          
          # Filter based on input parameters
          if [[ "${{ inputs.tts_engine }}" != "all" ]]; then
            ENGINES=("${{ inputs.tts_engine }}")
          fi
          
          if [[ "${{ inputs.mode }}" != "all" ]]; then
            MODES=("${{ inputs.mode }}")
          fi
          
          if [[ "${{ inputs.use_custom_voice }}" != "all" ]]; then
            if [[ "${{ inputs.use_custom_voice }}" == "true" ]]; then
              VOICES=("custom")
            else
              VOICES=("default")
            fi
          fi
          
          # Create the matrix directly as a JSON string
          echo "test_matrix=[]" >> $GITHUB_OUTPUT
          
          # Temporary file for building the matrix
          touch matrix_temp.json
          echo "[]" > matrix_temp.json
          
          # Generate regular tests
          for ENGINE in "${ENGINES[@]}"; do
            for MODE in "${MODES[@]}"; do
              for VOICE in "${VOICES[@]}"; do
                for LANG in "${LANGS[@]}"; do
                  NAME="${LANG} ${ENGINE} headless"
                  if [[ "$VOICE" == "custom" ]]; then
                    NAME="${NAME} Custom-Voice"
                  fi
                  NAME="${NAME} ${MODE} test"
                  
                  # Build command with proper escaping
                  if [[ "$MODE" == "single" ]]; then
                    EBOOK_PARAM="--ebook tools/workflow-testing/test1.txt"
                  else
                    EBOOK_PARAM="--ebooks_dir tools/workflow-testing"
                  fi
                  
                  if [[ "$VOICE" == "custom" ]]; then
                    VOICE_PARAM="--voice voices/eng/elder/male/DavidAttenborough_24000.wav"
                  else
                    VOICE_PARAM=""
                  fi
                  
                  CMD="--headless --script_mode full_docker --language ${LANG} --tts_engine ${ENGINE} ${EBOOK_PARAM} ${VOICE_PARAM}"
                  
                  # Safely append to the matrix
                  jq --arg name "$NAME" --arg cmd "$CMD" '. += [{"name": $name, "cmd": $cmd}]' matrix_temp.json > matrix_temp2.json
                  mv matrix_temp2.json matrix_temp.json
                done
              done
            done
          done
          
          # Add special XTTS fine-tuned tests if XTTS is included
          if [[ "${{ inputs.tts_engine }}" == "all" || "${{ inputs.tts_engine }}" == "xtts" ]]; then
            if [[ "${{ inputs.mode }}" == "all" || "${{ inputs.mode }}" == "single" ]]; then
              # Run XTTS fine-tuned tests for each language that matches eng
              for LANG in "${LANGS[@]}"; do
                if [[ "$LANG" == "eng" ]]; then
                  NAME="English XTTS headless fine-tuned XTTS model single test"
                  CMD="--headless --script_mode full_docker --language eng --ebook tools/workflow-testing/test1.txt --tts_engine xtts --fine_tuned AiExplained"
                  jq --arg name "$NAME" --arg cmd "$CMD" '. += [{"name": $name, "cmd": $cmd}]' matrix_temp.json > matrix_temp2.json
                  mv matrix_temp2.json matrix_temp.json
                fi
              done
            fi
            
            if [[ "${{ inputs.mode }}" == "all" || "${{ inputs.mode }}" == "batch" ]]; then
              # Run XTTS fine-tuned tests for each language that matches eng
              for LANG in "${LANGS[@]}"; do
                if [[ "$LANG" == "eng" ]]; then
                  NAME="English XTTS headless fine-tuned XTTS model batch test"
                  CMD="--headless --script_mode full_docker --language eng --ebooks_dir tools/workflow-testing --tts_engine xtts --fine_tuned AiExplained"
                  jq --arg name "$NAME" --arg cmd "$CMD" '. += [{"name": $name, "cmd": $cmd}]' matrix_temp.json > matrix_temp2.json
                  mv matrix_temp2.json matrix_temp.json
                fi
              done
            fi
          fi
          
          # Set output for test matrix in the correct format
          MATRIX_JSON=$(cat matrix_temp.json)
          # Use proper multiline string syntax for GITHUB_OUTPUT
          echo "test_matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Set output for help test
          if [[ "${{ inputs.run_help_test }}" == "true" ]]; then
            echo "help_test=true" >> $GITHUB_OUTPUT
          else
            echo "help_test=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

  run_help_test:
    needs: build
    if: needs.build.outputs.help_test == 'true'
    runs-on: [self-hosted, Linux, ARM64]
    env:
      DOCKER_TAG: ${{ inputs.docker_tag || 'lite_dev_v25' }}
    steps:
      - name: Prune dangling Docker images
        run: docker image prune -f
        
      - name: Run help command test
        run: |
          echo "Running help command test"
          set +e
          docker run --rm --pull=always --gpus all ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ env.DOCKER_TAG }} --help
          STATUS=$?
          set -e
          
          if [ $STATUS -ne 0 ]; then
            echo "GPU run failed, trying without GPU support..."
            docker run --rm --pull=always ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ env.DOCKER_TAG }} --help
          fi
        shell: bash
  run_tests:
    needs: build
    runs-on: [self-hosted, Linux, ARM64]
    strategy:
      fail-fast: false
      matrix: 
        test: ${{ fromJson(needs.build.outputs.test_matrix) }}
    env:
      DOCKER_TAG: ${{ inputs.docker_tag || 'lite_dev_v25' }}
    steps:
      - name: Prune dangling Docker images
        run: docker image prune -f
      
      - name: Run ${{ matrix.test.name }} and preserve models
        id: run_test
        run: |
          echo "Running test: ${{ matrix.test.name }}"
          echo "Command: ${{ matrix.test.cmd }}"
          
          # Generate a unique container name for this test
          CONTAINER_NAME="test_container_${{ github.run_id }}_${{ strategy.job-index }}"
          
          # First try with GPU
          set +e
          docker run --name $CONTAINER_NAME --pull=always --gpus all ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ env.DOCKER_TAG }} ${{ matrix.test.cmd }}
          TEST_STATUS=$?
          set -e
          
          # If GPU run failed, try without GPU but keep the container
          if [ $TEST_STATUS -ne 0 ]; then
            echo "GPU run failed, trying without GPU support..."
            # Remove the previous container
            docker rm $CONTAINER_NAME || true
            
            # Run without GPU
            docker run --name $CONTAINER_NAME --pull=always ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ env.DOCKER_TAG }} ${{ matrix.test.cmd }}
            TEST_STATUS=$?
          fi
          
          # Always commit and push the container state to preserve models
          echo "Committing container state to preserve downloaded models..."
          docker commit $CONTAINER_NAME ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ env.DOCKER_TAG }}
          
          # Login to Docker Hub again
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          
          # Push the image with the models
          echo "Pushing image with downloaded models..."
          docker push ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ env.DOCKER_TAG }}
          
          # Remove the container
          docker rm $CONTAINER_NAME || true
          
          # Exit with the test's status
          exit $TEST_STATUS
        shell: bash
