name: Lite Test Ubuntu Headless

on:
  push:
    branches:
      - act-trigger
  workflow_dispatch:
    inputs:
      run_fairseq:
        description: 'Run Fairseq tests'
        type: boolean
        default: true
      run_vits:
        description: 'Run VITS tests'
        type: boolean
        default: true
      run_yourtts:
        description: 'Run YourTTS tests'
        type: boolean
        default: true
      run_xtts:
        description: 'Run XTTS tests'
        type: boolean
        default: true
      run_batch_tests:
        description: 'Run batch tests'
        type: boolean
        default: false
      run_single_tests:
        description: 'Run single file tests'
        type: boolean
        default: true
      run_custom_voice:
        description: 'Run custom voice tests'
        type: boolean
        default: true
      test_languages:
        description: 'Languages to test (comma-separated, e.g., eng,urd-script_devanagari)'
        type: string
        default: 'eng'
      upload_outputs:
        description: 'Upload output files'
        type: boolean
        default: true

jobs:
  run-script:
    runs-on: [ubuntu-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Check Python version
        run: python --version
        
      - name: Install the system packages
        run: |
          sudo apt-get update &&
          sudo apt-get install -y gcc g++ make wget git calibre ffmpeg nodejs espeak espeak-ng rustc cargo libmecab-dev mecab mecab-ipadic-utf8 curl libsndfile1-dev libc-dev sox &&
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo bash - &&
          sudo apt-get install -y nodejs &&
          sudo apt-get clean &&
          sudo rm -rf /var/lib/apt/lists/*

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install the python requirements
        run: |
          python -m pip install --upgrade pip
          pip cache purge
          pip install -r requirements.txt

      - name: pip Install unict
        run: pip install unidic-lite unidic

      - name: Download the unict dictionary
        run: |
          python -m unidic download
          mkdir -p ~/.local/share/unidic

      - name: Set UniDic environment variable
        run: echo "UNIDIC_DIR=$HOME/.local/share/unidic" >> $GITHUB_ENV

      - name: Help command python app.py
        run: python app.py --help

      - name: Create test files
        run: |
          mkdir -p tools/workflow-testing
          CONTENT=$'"This is a test sentence," she said. "Here'\''s another one."\nThe quick brown fox jumps over the lazy dog, but the cat stays still.\nNumbers like 123,456.78 should also be tested.\nWhat happens if we use question marks? Or exclamation points!\n"Nested quotes are '\''interesting'\''," he noted.'
          echo -e "$CONTENT" > tools/workflow-testing/test1.txt
          echo -e "$CONTENT" > tools/workflow-testing/test2.txt
          echo -e "$CONTENT" > tools/workflow-testing/test3.txt
          echo -e "$CONTENT" > tools/workflow-testing/test4.txt
          echo -e "$CONTENT" > tools/workflow-testing/test5.txt

      # Fairseq Tests
      - name: Run Fairseq tests
        if: github.event.inputs.run_fairseq == 'true' || github.event_name == 'push'
        run: |
          # Parse languages
          IFS=',' read -ra LANGUAGES <<< "${{ github.event.inputs.test_languages || 'eng' }}"
          
          for lang in "${LANGUAGES[@]}"; do
            # Single file test
            if [[ "${{ github.event.inputs.run_single_tests }}" == "true" || "${{ github.event_name }}" == "push" ]]; then
              echo "Running Fairseq single test for $lang"
              python app.py --headless --script_mode full_docker --language "$lang" --ebook "tools/workflow-testing/test1.txt" --tts_engine fairseq
            fi
            
            # Batch test
            if [[ "${{ github.event.inputs.run_batch_tests }}" == "true" ]]; then
              echo "Running Fairseq batch test for $lang"
              python app.py --headless --script_mode full_docker --language "$lang" --ebooks_dir "tools/workflow-testing" --tts_engine fairseq
            fi
            
            # Custom voice tests
            if [[ "${{ github.event.inputs.run_custom_voice }}" == "true" || "${{ github.event_name }}" == "push" ]]; then
              echo "Running Fairseq custom voice single test for $lang"
              python app.py --headless --script_mode full_docker --language "$lang" --ebook "tools/workflow-testing/test1.txt" --tts_engine fairseq --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"
              
              if [[ "${{ github.event.inputs.run_batch_tests }}" == "true" ]]; then
                echo "Running Fairseq custom voice batch test for $lang"
                python app.py --headless --script_mode full_docker --language "$lang" --ebooks_dir "tools/workflow-testing" --tts_engine fairseq --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"
              fi
            fi
            
            # Clean up after each language test
            rm -rf models/tts/*
          done

      # VITS Tests
      - name: Run VITS tests
        if: github.event.inputs.run_vits == 'true' || github.event_name == 'push'
        run: |
          # Parse languages
          IFS=',' read -ra LANGUAGES <<< "${{ github.event.inputs.test_languages || 'eng' }}"
          
          for lang in "${LANGUAGES[@]}"; do
            # Single file test
            if [[ "${{ github.event.inputs.run_single_tests }}" == "true" || "${{ github.event_name }}" == "push" ]]; then
              echo "Running VITS single test for $lang"
              python app.py --headless --script_mode full_docker --language "$lang" --ebook "tools/workflow-testing/test1.txt" --tts_engine vits
            fi
            
            # Batch test
            if [[ "${{ github.event.inputs.run_batch_tests }}" == "true" ]]; then
              echo "Running VITS batch test for $lang"
              python app.py --headless --script_mode full_docker --language "$lang" --ebooks_dir "tools/workflow-testing" --tts_engine vits
            fi
            
            # Custom voice tests
            if [[ "${{ github.event.inputs.run_custom_voice }}" == "true" || "${{ github.event_name }}" == "push" ]]; then
              echo "Running VITS custom voice single test for $lang"
              python app.py --headless --script_mode full_docker --language "$lang" --ebook "tools/workflow-testing/test1.txt" --tts_engine vits --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"
              
              if [[ "${{ github.event.inputs.run_batch_tests }}" == "true" ]]; then
                echo "Running VITS custom voice batch test for $lang"
                python app.py --headless --script_mode full_docker --language "$lang" --ebooks_dir "tools/workflow-testing" --tts_engine vits --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"
              fi
            fi
            
            # Clean up after each language test
            rm -rf models/tts/*
          done

      # YourTTS Tests
      - name: Run YourTTS tests
        if: github.event.inputs.run_yourtts == 'true' || github.event_name == 'push'
        run: |
          # Parse languages
          IFS=',' read -ra LANGUAGES <<< "${{ github.event.inputs.test_languages || 'eng' }}"
          
          for lang in "${LANGUAGES[@]}"; do
            # Single file test
            if [[ "${{ github.event.inputs.run_single_tests }}" == "true" || "${{ github.event_name }}" == "push" ]]; then
              echo "Running YourTTS single test for $lang"
              python app.py --headless --script_mode full_docker --language "$lang" --ebook "tools/workflow-testing/test1.txt" --tts_engine yourtts
            fi
            
            # Batch test
            if [[ "${{ github.event.inputs.run_batch_tests }}" == "true" ]]; then
              echo "Running YourTTS batch test for $lang"
              python app.py --headless --script_mode full_docker --language "$lang" --ebooks_dir "tools/workflow-testing" --tts_engine yourtts
            fi
            
            # Custom voice tests
            if [[ "${{ github.event.inputs.run_custom_voice }}" == "true" || "${{ github.event_name }}" == "push" ]]; then
              echo "Running YourTTS custom voice single test for $lang"
              python app.py --headless --script_mode full_docker --language "$lang" --ebook "tools/workflow-testing/test1.txt" --tts_engine yourtts --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"
              
              if [[ "${{ github.event.inputs.run_batch_tests }}" == "true" ]]; then
                echo "Running YourTTS custom voice batch test for $lang"
                python app.py --headless --script_mode full_docker --language "$lang" --ebooks_dir "tools/workflow-testing" --tts_engine yourtts --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"
              fi
            fi
            
            # Clean up after each language test
            rm -rf models/tts/*
          done

      # XTTS Tests
      - name: Run XTTS tests
        if: github.event.inputs.run_xtts == 'true' || github.event_name == 'push'
        run: |
          # Parse languages
          IFS=',' read -ra LANGUAGES <<< "${{ github.event.inputs.test_languages || 'eng' }}"
          
          for lang in "${LANGUAGES[@]}"; do
            # Single file test
            if [[ "${{ github.event.inputs.run_single_tests }}" == "true" || "${{ github.event_name }}" == "push" ]]; then
              echo "Running XTTS single test for $lang"
              python app.py --headless --script_mode full_docker --language "$lang" --ebook "tools/workflow-testing/test1.txt" --tts_engine xtts
            fi
            
            # Batch test
            if [[ "${{ github.event.inputs.run_batch_tests }}" == "true" ]]; then
              echo "Running XTTS batch test for $lang"
              python app.py --headless --script_mode full_docker --language "$lang" --ebooks_dir "tools/workflow-testing" --tts_engine xtts
            fi
            
            # Custom voice tests
            if [[ "${{ github.event.inputs.run_custom_voice }}" == "true" || "${{ github.event_name }}" == "push" ]]; then
              echo "Running XTTS custom voice single test for $lang"
              python app.py --headless --script_mode full_docker --language "$lang" --ebook "tools/workflow-testing/test1.txt" --tts_engine xtts --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"
              
              if [[ "${{ github.event.inputs.run_batch_tests }}" == "true" ]]; then
                echo "Running XTTS custom voice batch test for $lang"
                python app.py --headless --script_mode full_docker --language "$lang" --ebooks_dir "tools/workflow-testing" --tts_engine xtts --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"
              fi
            fi
            
            # Clean up after each language test
            rm -rf models/tts/*
          done

      # Upload outputs
      - name: Upload outputs
        if: github.event.inputs.upload_outputs == 'true' || github.event_name == 'push'
        run: |
          zip -r audiobooks.zip audiobooks && curl -F "file=@audiobooks.zip" https://0x0.st
