name: Lite Test
on:
  workflow_dispatch:
    inputs:
      tts_engine:
        description: 'TTS Engine to use'
        required: true
        default: 'xtts'
        type: choice
        options:
          - fairseq
          - vits
          - yourtts
          - xtts
      mode:
        description: 'Processing mode'
        required: true
        default: 'single'
        type: choice
        options:
          - single
          - batch
      use_custom_voice:
        description: 'Use custom voice'
        required: true
        default: false
        type: boolean
      use_xtts_zip_mode:
        description: 'Use XTTS model in zip mode (only applies when TTS engine is XTTS)'
        required: true
        default: false
        type: boolean
      language:
        description: 'Language code'
        required: true
        default: 'eng'
        type: string
  
jobs:
  run-tts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Check Python version
        run: python --version
      
      - name: Install system dependencies
        run: |
          sudo apt-get update &&
          sudo apt-get install -y gcc g++ make wget git calibre ffmpeg nodejs espeak espeak-ng rustc cargo libmecab-dev mecab mecab-ipadic-utf8 curl libsndfile1-dev libc-dev sox &&
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo bash - &&
          sudo apt-get install -y nodejs &&
          sudo apt-get clean &&
          sudo rm -rf /var/lib/apt/lists/*

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install Python requirements
        run: |
          python -m pip install --upgrade pip
          pip cache purge
          pip install -r requirements.txt

      - name: Install unict
        run: pip install unidic-lite unidic

      - name: Download unict dictionary
        run: |
          python -m unidic download
          mkdir -p ~/.local/share/unidic

      - name: Set UniDic environment variable
        run: echo "UNIDIC_DIR=$HOME/.local/share/unidic" >> $GITHUB_ENV

      - name: Help command python app.py
        run: python app.py --help
      
      # Create test files
      - name: Create test files
        run: |
          mkdir -p tools/workflow-testing
          CONTENT=$'"This is a test sentence," she said. "Here'\''s another one."\nThe quick brown fox jumps over the lazy dog, but the cat stays still.\nNumbers like 123,456.78 should also be tested.\nWhat happens if we use question marks? Or exclamation points!\n"Nested quotes are '\''interesting'\''," he noted.'
          echo -e "$CONTENT" > tools/workflow-testing/test1.txt
          echo -e "$CONTENT" > tools/workflow-testing/test2.txt
          echo -e "$CONTENT" > tools/workflow-testing/test3.txt
          echo -e "$CONTENT" > tools/workflow-testing/test4.txt
          echo -e "$CONTENT" > tools/workflow-testing/test5.txt
          ls -la tools/workflow-testing/

      # Debug step to see input values
      - name: Debug input values and conditionals
        run: |
          echo "TTS Engine: ${{ inputs.tts_engine }}"
          echo "Mode: ${{ inputs.mode }}"
          echo "Use Custom Voice: ${{ inputs.use_custom_voice }}"
          echo "Use XTTS Zip Mode: ${{ inputs.use_xtts_zip_mode }}"
          echo "Language: ${{ inputs.language }}"
          echo "Working directory: $(pwd)"
          echo "Files in tools/workflow-testing:"
          ls -la tools/workflow-testing/
          
          # Debug conditional expressions
          echo "Conditional Check: Single mode with default voice"
          echo "${{ inputs.mode == 'single' }} && ${{ inputs.use_custom_voice == false }} && !(${{ inputs.tts_engine == 'xtts' }} && ${{ inputs.use_xtts_zip_mode == true }})"
          
          echo "Conditional Check: Batch mode with default voice"
          echo "${{ inputs.mode == 'batch' }} && ${{ inputs.use_custom_voice == false }} && !(${{ inputs.tts_engine == 'xtts' }} && ${{ inputs.use_xtts_zip_mode == true }})"
          
          echo "Conditional Check: Single mode with custom voice"
          echo "${{ inputs.mode == 'single' }} && ${{ inputs.use_custom_voice == true }} && !(${{ inputs.tts_engine == 'xtts' }} && ${{ inputs.use_xtts_zip_mode == true }})"
          
          echo "Conditional Check: Batch mode with custom voice"
          echo "${{ inputs.mode == 'batch' }} && ${{ inputs.use_custom_voice == true }} && !(${{ inputs.tts_engine == 'xtts' }} && ${{ inputs.use_xtts_zip_mode == true }})"

      # Define script selection based on inputs
      - name: Set script parameters
        id: params
        run: |
          # Convert boolean inputs to string values
          if [ "${{ inputs.use_custom_voice }}" = "true" ]; then
            echo "custom_voice=true" >> $GITHUB_OUTPUT
          else
            echo "custom_voice=false" >> $GITHUB_OUTPUT
          fi
          
          if [ "${{ inputs.use_xtts_zip_mode }}" = "true" ]; then
            echo "xtts_zip=true" >> $GITHUB_OUTPUT
          else
            echo "xtts_zip=false" >> $GITHUB_OUTPUT
          fi
          
          echo "mode=${{ inputs.mode }}" >> $GITHUB_OUTPUT
          echo "tts_engine=${{ inputs.tts_engine }}" >> $GITHUB_OUTPUT
          echo "language=${{ inputs.language }}" >> $GITHUB_OUTPUT
          
          echo "Parameters set:"
          cat $GITHUB_OUTPUT

      # XTTS ZIP MODE PREPARATION
      - name: Download XTTS model for zip mode
        if: ${{ steps.params.outputs.tts_engine == 'xtts' && steps.params.outputs.xtts_zip == 'true' }}
        run: |
          echo "Downloading XTTS model for zip mode..."
          python app.py --headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine xtts --skip_audio_generation
          ls -la models/tts/
      
      - name: Create the custom_xtts_test.zip
        if: ${{ steps.params.outputs.tts_engine == 'xtts' && steps.params.outputs.xtts_zip == 'true' }}
        run: |
          echo "Creating custom_xtts_test.zip..."
          cp voices/eng/elder/male/DavidAttenborough_24000.wav ref.wav
          ls -la models/tts/tts_models--multilingual--multi-dataset--xtts_v2/
          zip -j custom_xtts_test.zip models/tts/tts_models--multilingual--multi-dataset--xtts_v2/config.json models/tts/tts_models--multilingual--multi-dataset--xtts_v2/model.pth models/tts/tts_models--multilingual--multi-dataset--xtts_v2/vocab.json ref.wav
          rm -f ref.wav
          ls -la custom_xtts_test.zip
      
      - name: Wipe models/tts folder for zip mode
        if: ${{ steps.params.outputs.tts_engine == 'xtts' && steps.params.outputs.xtts_zip == 'true' }}
        run: |
          echo "Wiping models/tts folder..."
          rm -rf models/tts/*
          mkdir -p models/tts
          ls -la models/tts/

      # Run Single Mode Tests
      - name: Run Single Mode - Default Voice
        if: ${{ steps.params.outputs.mode == 'single' && steps.params.outputs.custom_voice == 'false' && !(steps.params.outputs.tts_engine == 'xtts' && steps.params.outputs.xtts_zip == 'true') }}
        run: |
          echo "Running single mode with default voice for ${{ steps.params.outputs.tts_engine }}..."
          python app.py --headless --script_mode full_docker --language ${{ steps.params.outputs.language }} --ebook "tools/workflow-testing/test1.txt" --tts_engine ${{ steps.params.outputs.tts_engine }}

      - name: Run Single Mode - Custom Voice
        if: ${{ steps.params.outputs.mode == 'single' && steps.params.outputs.custom_voice == 'true' && !(steps.params.outputs.tts_engine == 'xtts' && steps.params.outputs.xtts_zip == 'true') }}
        run: |
          echo "Running single mode with custom voice for ${{ steps.params.outputs.tts_engine }}..."
          python app.py --headless --script_mode full_docker --language ${{ steps.params.outputs.language }} --ebook "tools/workflow-testing/test1.txt" --tts_engine ${{ steps.params.outputs.tts_engine }} --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"

      # Run Batch Mode Tests
      - name: Run Batch Mode - Default Voice
        if: ${{ steps.params.outputs.mode == 'batch' && steps.params.outputs.custom_voice == 'false' && !(steps.params.outputs.tts_engine == 'xtts' && steps.params.outputs.xtts_zip == 'true') }}
        run: |
          echo "Running batch mode with default voice for ${{ steps.params.outputs.tts_engine }}..."
          python app.py --headless --script_mode full_docker --language ${{ steps.params.outputs.language }} --ebooks_dir "tools/workflow-testing" --tts_engine ${{ steps.params.outputs.tts_engine }}

      - name: Run Batch Mode - Custom Voice
        if: ${{ steps.params.outputs.mode == 'batch' && steps.params.outputs.custom_voice == 'true' && !(steps.params.outputs.tts_engine == 'xtts' && steps.params.outputs.xtts_zip == 'true') }}
        run: |
          echo "Running batch mode with custom voice for ${{ steps.params.outputs.tts_engine }}..."
          python app.py --headless --script_mode full_docker --language ${{ steps.params.outputs.language }} --ebooks_dir "tools/workflow-testing" --tts_engine ${{ steps.params.outputs.tts_engine }} --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"

      # Run XTTS Zip Mode Tests
      - name: Run XTTS Zip Mode - Single - Default Voice
        if: ${{ steps.params.outputs.mode == 'single' && steps.params.outputs.custom_voice == 'false' && steps.params.outputs.tts_engine == 'xtts' && steps.params.outputs.xtts_zip == 'true' }}
        run: |
          echo "Running single mode with default voice for XTTS (zip mode)..."
          python app.py --headless --script_mode full_docker --language ${{ steps.params.outputs.language }} --ebook "tools/workflow-testing/test1.txt" --tts_engine xtts --custom_model "custom_xtts_test.zip"

      - name: Run XTTS Zip Mode - Single - Custom Voice
        if: ${{ steps.params.outputs.mode == 'single' && steps.params.outputs.custom_voice == 'true' && steps.params.outputs.tts_engine == 'xtts' && steps.params.outputs.xtts_zip == 'true' }}
        run: |
          echo "Running single mode with custom voice for XTTS (zip mode)..."
          python app.py --headless --script_mode full_docker --language ${{ steps.params.outputs.language }} --ebook "tools/workflow-testing/test1.txt" --tts_engine xtts --custom_model "custom_xtts_test.zip" --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"

      - name: Run XTTS Zip Mode - Batch - Default Voice
        if: ${{ steps.params.outputs.mode == 'batch' && steps.params.outputs.custom_voice == 'false' && steps.params.outputs.tts_engine == 'xtts' && steps.params.outputs.xtts_zip == 'true' }}
        run: |
          echo "Running batch mode with default voice for XTTS (zip mode)..."
          python app.py --headless --script_mode full_docker --language ${{ steps.params.outputs.language }} --ebooks_dir "tools/workflow-testing" --tts_engine xtts --custom_model "custom_xtts_test.zip"

      - name: Run XTTS Zip Mode - Batch - Custom Voice
        if: ${{ steps.params.outputs.mode == 'batch' && steps.params.outputs.custom_voice == 'true' && steps.params.outputs.tts_engine == 'xtts' && steps.params.outputs.xtts_zip == 'true' }}
        run: |
          echo "Running batch mode with custom voice for XTTS (zip mode)..."
          python app.py --headless --script_mode full_docker --language ${{ steps.params.outputs.language }} --ebooks_dir "tools/workflow-testing" --tts_engine xtts --custom_model "custom_xtts_test.zip" --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"

      # Fallback run if no conditions matched (for debugging)
      - name: Fallback run if no conditions matched
        if: ${{ !contains(steps.*.conclusion, 'success') }}
        run: |
          echo "No test conditions matched! Running fallback test..."
          python app.py --headless --script_mode full_docker --language ${{ inputs.language }} --ebook "tools/workflow-testing/test1.txt" --tts_engine ${{ inputs.tts_engine }}

      # Clean up zip file
      - name: Delete custom_xtts_test.zip
        if: ${{ steps.params.outputs.tts_engine == 'xtts' && steps.params.outputs.xtts_zip == 'true' }}
        run: rm -f custom_xtts_test.zip
      
      - name: Upload audiobooks as artifact
        uses: actions/upload-artifact@v4
        with:
          name: audiobooks
          path: audiobooks/
          retention-days: 3
