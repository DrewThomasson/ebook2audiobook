name: Docker Build

on:
  workflow_dispatch:
    inputs:
      wipeAndReinstall:
        type: boolean
        description: 'Wipe & Re-Install E2A'
  push:
    branches:
      - main
    paths-ignore:
      - CODE_OF_CONDUCT.md
      - LICENSE
      - README.md
      - readme/**
      - dockerfiles/**
      - Notebooks/**

  workflow_run:
    workflows: ["Mac E2A Test"]
    types:
      - completed
    branches:
      - main

jobs:
  DockerBuild:
    runs-on: [self-hosted, macos]
    steps:

      - name: Wipe & Re-Clone E2A E2ADockerBuild
        if: ${{ inputs.wipeAndReinstall }}
        run: rm -rf ~/E2ADockerBuild/ebook2audiobook

      - name: Clone ebook2audiobook into E2ADockerBuild
        shell: bash
        run: |
          if [ -d ~/E2ADockerBuild/ebook2audiobook ]; then
            cd ~/E2ADockerBuild/ebook2audiobook
            git fetch --all
            git reset --hard ${{ github.event.pull_request.head.sha || github.sha }}
          else
            git clone https://github.com/DrewThomasson/ebook2audiobook.git ~/E2ADockerBuild/ebook2audiobook
            cd ~/E2ADockerBuild/ebook2audiobook
            git fetch --all
            git reset --hard ${{ github.event.pull_request.head.sha || github.sha }}
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          buildkitd-flags: "--allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host"

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get Git Commit Hash
        run: echo "GIT_HASH=${GITHUB_SHA::9}" >> $GITHUB_ENV

      - name: Get Latest Release Tag
        run: |
          TAG=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          if [ -z "$TAG" ] || [ "$TAG" == "null" ]; then TAG="latest"; fi
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV

      - name: Debug Print Variables
        run: |
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}"
          echo "GIT_HASH=${GIT_HASH}"
          echo "RELEASE_TAG=${RELEASE_TAG}"

      - name: Build and Push Release Docker Image
        run: |
          cd ~/E2ADockerBuild/ebook2audiobook
          docker buildx build --pull --platform linux/amd64,linux/arm64 \
            -t ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${GIT_HASH} \
            -t ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${RELEASE_TAG} \
            -t ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:latest \
            --push .

      - name: Prune docker & buildx
        run: |
          docker system prune -af --volumes
          docker buildx prune -af

  huggingface-build:
    runs-on: [self-hosted, macos]
    steps:

      - name: Wipe & Re-Clone E2A E2ADockerBuild
        if: ${{ inputs.wipeAndReinstall }}
        run: rm -rf ~/E2ADockerBuild/ebook2audiobook

      - name: Clone ebook2audiobook into E2ADockerBuild
        shell: bash
        run: |
          if [ -d ~/E2ADockerBuild/ebook2audiobook ]; then
            cd ~/E2ADockerBuild/ebook2audiobook
            git fetch --all
            git reset --hard ${{ github.event.pull_request.head.sha || github.sha }}
          else
            git clone https://github.com/DrewThomasson/ebook2audiobook.git ~/E2ADockerBuild/ebook2audiobook
            cd ~/E2ADockerBuild/ebook2audiobook
            git fetch --all
            git reset --hard ${{ github.event.pull_request.head.sha || github.sha }}
          fi
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          buildkitd-flags: "--allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host"

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Huggingface Docker Image
        run: |
          cd ~/E2ADockerBuild/ebook2audiobook
          docker buildx build --platform linux/amd64 \
            -f dockerfiles/HuggingfaceDockerfile \
            -t ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:HuggingfaceSpace \
            --push .

      - name: Prune docker & buildx
        run: |
          docker system prune -af --volumes
          docker buildx prune -af

            
