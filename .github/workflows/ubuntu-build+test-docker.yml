name: Docker Build+Test
on:
  workflow_dispatch:
    inputs:
      docker_tag:
        description: 'Docker tag to use for testing'
        required: false
        default: 'dev'
        type: string
  push:
    branches:
      - main
    paths-ignore:
      - CODE_OF_CONDUCT.md
      - LICENSE
      - README.md
      - readme/**
      - dockerfiles/**
      - Notebooks/**


jobs:
  build_base:
    runs-on: [self-hosted, Linux, ARM64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx (Unix)
        if: runner.os != 'Windows'
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          buildkitd-flags: "--allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host"

      - name: Set up Docker Buildx (Windows)
        if: runner.os == 'Windows'
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Prune all dangling Docker images
        run: docker image prune -f

      - name: Build and Push Base Docker Image
        run: |
          docker buildx build --pull --target base --platform linux/amd64,linux/arm64 \
            -t athomasson2/ebook2audiobook:base \
            --push .
            



  build:
    needs: build_base
    runs-on: [self-hosted, Linux, ARM64]
    env:
      DOCKER_TAG: ${{ inputs.docker_tag || 'dev' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker Buildx conditionally based on OS:
      - name: Set up Docker Buildx (Windows)
        if: runner.os == 'Windows'
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker Buildx (Unix)
        if: runner.os != 'Windows'
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          buildkitd-flags: --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Get Git Commit Hash for Linux/macOS
      - name: Get Git Commit Hash (Unix)
        if: runner.os != 'Windows'
        run: echo "GIT_HASH=$(git rev-parse --short=9 HEAD)" >> $GITHUB_ENV

      # Get Git Commit Hash for Windows using PowerShell
      - name: Get Git Commit Hash (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $gitHash = (git rev-parse --short=9 HEAD).Trim()
          Add-Content -Path $env:GITHUB_ENV -Value "GIT_HASH=$gitHash"
      # Get Latest Release Tag for Linux/macOS
      - name: Get Latest Release Tag (Unix)
        if: runner.os != 'Windows'
        id: get_tag
        run: |
          TAG=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV
      # Get Latest Release Tag for Windows using PowerShell
      - name: Get Latest Release Tag (Windows)
        if: runner.os == 'Windows'
        id: get_tag_win
        shell: powershell
        run: |
          $response = Invoke-WebRequest -Uri "https://api.github.com/repos/${{ github.repository }}/releases/latest" -UseBasicParsing
          $json = $response.Content | ConvertFrom-Json
          $tag = $json.tag_name
          Add-Content -Path $env:GITHUB_ENV -Value "RELEASE_TAG=$tag"
      # Re-integrate once the other parts pass please Drew :)
      # Build and Push Dev Docker Image for Unix using bash
      - name: Build and Push Dev Docker Image (multi-arch, Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          docker buildx build --pull --platform linux/amd64,linux/arm64 \
            --build-arg BASE_IMAGE=${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:base \
            -t ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ env.DOCKER_TAG }} \
            --push \
            .

      # Build and Push Dev Docker Image for Windows using PowerShell
      - name: Build and Push Dev Docker Image (multi-arch, Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          docker buildx build --pull --platform linux/amd64,linux/arm64 `
            --build-arg BASE_IMAGE=${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:base `
            -t ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ env.DOCKER_TAG }} `
            --push `
            .









  run_tests:
    needs: build
    runs-on: self-hosted
    strategy:
      matrix:
        test:
          - name: "Help command test"
            command: "--help"
          - name: "English Fairseq headless single test"
            command: "--headless --script_mode full_docker --language eng --ebook \"tools/workflow-testing/test1.txt\" --tts_engine fairseq"
          - name: "English Fairseq headless batch test"
            command: "--headless --script_mode full_docker --language eng --ebooks_dir \"tools/workflow-testing\" --tts_engine fairseq"
          - name: "English Fairseq Custom-Voice headless single test"
            command: '--headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine fairseq --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"'
          - name: "English Fairseq Custom-Voice headless batch test"
            command: '--headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine fairseq --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"'
          - name: "Unusual Fairseq headless single test"
            command: '--headless --script_mode full_docker --language urd-script_devanagari --ebook "tools/workflow-testing/test1.txt" --tts_engine fairseq'
          - name: "Unusual Fairseq headless batch test"
            command: '--headless --script_mode full_docker --language urd-script_devanagari --ebooks_dir "tools/workflow-testing" --tts_engine fairseq'
          - name: "Unusual Fairseq Custom-Voice headless single test"
            command: '--headless --script_mode full_docker --language urd-script_devanagari --ebook "tools/workflow-testing/test1.txt" --tts_engine fairseq --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"'
          - name: "Unusual Fairseq Custom-Voice headless batch test"
            command: '--headless --script_mode full_docker --language urd-script_devanagari --ebooks_dir "tools/workflow-testing" --tts_engine fairseq --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"'
          - name: "English Vits headless single test"
            command: '--headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine vits'
          - name: "English Vits headless batch test"
            command: '--headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine vits'
          - name: "English Vits Custom-Voice headless single test"
            command: '--headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine vits --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"'
          - name: "English Vits Custom-Voice headless batch test"
            command: '--headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine vits --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"'
          - name: "English YourTTS headless single test"
            command: '--headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine yourtts'
          - name: "English YourTTS headless batch test"
            command: '--headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine yourtts'
          - name: "English YourTTS Custom-Voice headless single test"
            command: '--headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine yourtts --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"'
          - name: "English YourTTS Custom-Voice headless batch test"
            command: '--headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine yourtts --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"'
          - name: "Default headless single test"
            command: '--headless --script_mode full_docker --ebook "tools/workflow-testing/test1.txt"'
          - name: "Default XTTS headless batch test"
            command: '--headless --script_mode full_docker --ebooks_dir "tools/workflow-testing" --tts_engine xtts'
          - name: "Default XTTS headless Custom-Voice single test"
            command: '--headless --script_mode full_docker --ebook "tools/workflow-testing/test1.txt" --tts_engine xtts --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"'
          - name: "Default XTTS headless Custom-Voice batch test"
            command: '--headless --script_mode full_docker --ebooks_dir "tools/workflow-testing" --tts_engine xtts --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"'
          - name: "English XTTS headless fine-tuned XTTS model single test"
            command: '--headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine xtts --fine_tuned AiExplained'   
          - name: "English XTTS headless fine-tuned XTTS model batch test"
            command: '--headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine xtts --fine_tuned AiExplained'
          - name: "English Bark headless single test"
            command: '--headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine bark'
          #- name: "English Bark Custom-Voice headless batch test" # Marked out as it takes too long
          #  command: '--headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine bark --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"'
          - name: "English Bark Custom-Voice headless single test"
            command: '--headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine bark --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"'
          - name: "English Bark headless batch test"
            command: '--headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine bark'            
          # Add more test configurations as needed
    env:
      DOCKER_TAG: ${{ inputs.docker_tag || 'dev' }}
    steps:
      - name: Prune all dangling Docker images
        run: docker image prune -f
      
      - name: Run ${{ matrix.test.name }} (with GPU if available, Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "Attempting to run with GPU support..."
          docker run --rm --pull=always --gpus all ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ env.DOCKER_TAG }} ${{ matrix.test.command }} || \
          (echo "GPU run failed, trying without GPU support..." && docker run --rm --pull=always ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ env.DOCKER_TAG }} ${{ matrix.test.command }})
      
      - name: Run ${{ matrix.test.name }} (with GPU if available, Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"
          Write-Host "Attempting to run with GPU support..."
          try {
            docker run --rm --pull=always --gpus all ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ env.DOCKER_TAG }} ${{ matrix.test.command }}
          } catch {
            Write-Host "GPU run failed, trying without GPU support..."
            docker run --rm --pull=always ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ env.DOCKER_TAG }} ${{ matrix.test.command }}
          }
      
      - name: Prune all dangling Docker images
        run: docker image prune -f


  # The following tests are kept as comments for future implementation:
  # test_create_custom_xtts:
  #   needs: build
  #   runs-on: self-hosted
  #   steps:
  #     - name: Create the custom_xtts_test.zip for headless custom xtts model single test docker run ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:dev
  #       run: cp voices/eng/elder/male/DavidAttenborough_24000.wav ref.wav && zip -j custom_xtts_test.zip models/tts/tts_models--multilingual--multi-dataset--xtts_v2/config.json models/tts/tts_models--multilingual--multi-dataset--xtts_v2/model.pth models/tts/tts_models--multilingual--multi-dataset--xtts_v2/vocab.json ref.wav && rm -f ref.wav
  # test_xtts_custom_single:
  #   needs: build
  #   runs-on: self-hosted
  #   steps:
  #     - name: English xtts headless custom xtts model single test docker run ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:dev
  #       run: docker run ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:dev --headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine xtts --custom_model "custom_xtts_test.zip"
  # test_xtts_custom_batch:
  #   needs: build
  #   runs-on: self-hosted
  #   steps:
  #     - name: English xtts headless custom xtts model batch test docker run ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:dev
  #       run: docker run ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:dev --headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine xtts --custom_model "custom_xtts_test.zip"


  final_push:
    needs: run_tests
    runs-on: self-hosted
    env:
      DOCKER_TAG: ${{ inputs.docker_tag || 'dev' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      # Set up Docker Buildx conditionally
      - name: Set up Docker Buildx (Windows)
        if: runner.os == 'Windows'
        uses: docker/setup-buildx-action@v2
  
      - name: Set up Docker Buildx (Unix)
        if: runner.os != 'Windows'
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          buildkitd-flags: --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host
  
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
  
      # Get Git Commit Hash conditionally
      - name: Get Git Commit Hash (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "GIT_HASH=$(git rev-parse --short=9 HEAD)" >> $GITHUB_ENV
  
      - name: Get Git Commit Hash (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $gitHash = (git rev-parse --short=9 HEAD).Trim()
          Add-Content -Path $env:GITHUB_ENV -Value "GIT_HASH=$gitHash"
  
      # Get Latest Release Tag conditionally
      - name: Get Latest Release Tag (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          TAG=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          if [[ -z "$TAG" || "$TAG" == "null" ]]; then TAG="latest"; fi
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV
  
      - name: Get Latest Release Tag (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $response = Invoke-WebRequest -Uri "https://api.github.com/repos/${{ github.repository }}/releases/latest" -UseBasicParsing
          $json = $response.Content | ConvertFrom-Json
          $tag = $json.tag_name
          if (-not $tag -or $tag -eq "null") { $tag = "latest" }
          Add-Content -Path $env:GITHUB_ENV -Value "RELEASE_TAG=$tag"
  
      # ✅ Debugging Step (Shell-Specific)
      - name: Debug Print Variables (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          echo "DOCKER_USERNAME: $env:DOCKER_USERNAME"
          echo "GIT_HASH: $env:GIT_HASH"
          echo "RELEASE_TAG: $env:RELEASE_TAG"
  
      - name: Debug Print Variables (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}"
          echo "GIT_HASH=${GIT_HASH}"
          echo "RELEASE_TAG=${RELEASE_TAG}"
  
      # Re-tag dev Docker Images conditionally
      - name: Re-tag dev Docker Image (multi-arch, Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          docker buildx imagetools create \
            --tag ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:$GIT_HASH \
            --tag ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:$RELEASE_TAG \
            --tag ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:latest \
            ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ env.DOCKER_TAG }}
    
      - name: Re-tag dev Docker Image (multi-arch, Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $dockerUsername = "${{ secrets.DOCKER_USERNAME }}"
          $gitHash = if ($env:GIT_HASH) { $env:GIT_HASH } else { "latest" }
          $releaseTag = if ($env:RELEASE_TAG) { $env:RELEASE_TAG } else { "latest" }

          echo "DOCKER_USERNAME: $dockerUsername"
          echo "GIT_HASH: $gitHash"
          echo "RELEASE_TAG: $releaseTag"

          docker buildx imagetools create `
            --tag "$dockerUsername/ebook2audiobook:$gitHash" `
            --tag "$dockerUsername/ebook2audiobook:$releaseTag" `
            --tag "$dockerUsername/ebook2audiobook:latest" `
            "$dockerUsername/ebook2audiobook:${{ env.DOCKER_TAG }}"









  build_variants:
    needs: run_tests
    runs-on: self-hosted
    strategy:
      matrix:
        torch_version: [cuda12, cuda11, rocm, xpu, cpu]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Set up Docker Buildx conditionally
      - name: Set up Docker Buildx (Windows)
        if: runner.os == 'Windows'
        uses: docker/setup-buildx-action@v2
      
      - name: Set up Docker Buildx (Unix)
        if: runner.os != 'Windows'
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          buildkitd-flags: --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      # Get Git Commit Hash conditionally
      - name: Get Git Commit Hash (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "GIT_HASH=$(git rev-parse --short=9 HEAD)" >> $GITHUB_ENV
      
      - name: Get Git Commit Hash (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $gitHash = (git rev-parse --short=9 HEAD).Trim()
          Add-Content -Path $env:GITHUB_ENV -Value "GIT_HASH=$gitHash"
      
      # Get Latest Release Tag conditionally
      - name: Get Latest Release Tag (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          TAG=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          if [[ -z "$TAG" || "$TAG" == "null" ]]; then TAG="latest"; fi
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV
      
      - name: Get Latest Release Tag (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $response = Invoke-WebRequest -Uri "https://api.github.com/repos/${{ github.repository }}/releases/latest" -UseBasicParsing
          $json = $response.Content | ConvertFrom-Json
          $tag = $json.tag_name
          if (-not $tag -or $tag -eq "null") { $tag = "latest" }
          Add-Content -Path $env:GITHUB_ENV -Value "RELEASE_TAG=$tag"
      
      # Debug output
      - name: Debug Print Variables (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          echo "DOCKER_USERNAME: $env:DOCKER_USERNAME"
          echo "GIT_HASH: $env:GIT_HASH"
          echo "RELEASE_TAG: $env:RELEASE_TAG"
          echo "TORCH_VERSION: ${{ matrix.torch_version }}"
      
      - name: Debug Print Variables (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}"
          echo "GIT_HASH=${GIT_HASH}"
          echo "RELEASE_TAG=${RELEASE_TAG}"
          echo "TORCH_VERSION=${{ matrix.torch_version }}"
        
        # Build with Docker Buildx (Unix)
      - name: Build with Docker Buildx (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          PLATFORMS="linux/amd64,linux/arm64"
          if [[ "${{ matrix.torch_version }}" == "xpu" ]]; then
            PLATFORMS="linux/amd64"
          fi
          
          docker buildx build \
            --pull \
            --platform $PLATFORMS \
            --build-arg TORCH_VERSION=${{ matrix.torch_version }} \
            --build-arg BASE_IMAGE=${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:base \
            --tag ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ matrix.torch_version }}-${{ env.GIT_HASH }} \
            --tag ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ matrix.torch_version }}-${{ env.RELEASE_TAG }} \
            --tag ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ matrix.torch_version }} \
            --push \
            .
  
      - name: Build with Docker Buildx (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $PLATFORMS = "linux/amd64,linux/arm64"
          if ("${{ matrix.torch_version }}" -eq "xpu") {
            $PLATFORMS = "linux/amd64"
          }
          
          docker buildx build `
            --pull `
            --platform $PLATFORMS `
            --build-arg TORCH_VERSION=${{ matrix.torch_version }} `
            --build-arg BASE_IMAGE=${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:base `
            --tag ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ matrix.torch_version }}-${{ env.GIT_HASH }} `
            --tag ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ matrix.torch_version }}-${{ env.RELEASE_TAG }} `
            --tag ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ matrix.torch_version }} `
            --push `
            .
  















  
  huggingface:
    needs: run_tests
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker Buildx conditionally
      - name: Set up Docker Buildx (Windows)
        if: runner.os == 'Windows'
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker Buildx (Unix)
        if: runner.os != 'Windows'
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          buildkitd-flags: --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Get Git Commit Hash conditionally
      - name: Get Git Commit Hash (Unix)
        if: runner.os != 'Windows'
        run: echo "GIT_HASH=$(git rev-parse --short=9 HEAD)" >> $GITHUB_ENV

      - name: Get Git Commit Hash (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $gitHash = (git rev-parse --short=9 HEAD).Trim()
          Add-Content -Path $env:GITHUB_ENV -Value "GIT_HASH=$gitHash"
      # Get Latest Release Tag conditionally
      - name: Get Latest Release Tag (Unix)
        if: runner.os != 'Windows'
        id: get_tag
        run: |
          TAG=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV
      - name: Get Latest Release Tag (Windows)
        if: runner.os == 'Windows'
        id: get_tag_win
        shell: powershell
        run: |
          $response = Invoke-WebRequest -Uri "https://api.github.com/repos/${{ github.repository }}/releases/latest" -UseBasicParsing
          $json = $response.Content | ConvertFrom-Json
          $tag = $json.tag_name
          Add-Content -Path $env:GITHUB_ENV -Value "RELEASE_TAG=$tag"
      # Build and Push Huggingface Docker Image (x86 only)
      - name: Build and Push Huggingface Docker Image (x86 only, Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          docker buildx build --platform linux/amd64 \
            -f dockerfiles/HuggingfaceDockerfile \
            -t ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:HuggingfaceSpace \
            --push .
      - name: Build and Push Huggingface Docker Image (x86 only, Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: docker buildx build --platform linux/amd64 `
            -f dockerfiles/HuggingfaceDockerfile `
            -t ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:HuggingfaceSpace `
            --push .



