name: mini Ubuntu Build+Test

on:
  workflow_dispatch: {}
  release:
    types:
      - published
  push:
    branches:
      - main
    paths-ignore:
      - CODE_OF_CONDUCT.md
      - LICENSE
      - README.md
      - readme/**
      - dockerfiles/**
      - Notebooks/**

jobs:
  final_push:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      # Set up Docker Buildx conditionally
      - name: Set up Docker Buildx (Windows)
        if: runner.os == 'Windows'
        uses: docker/setup-buildx-action@v2
  
      - name: Set up Docker Buildx (Unix)
        if: runner.os != 'Windows'
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          buildkitd-flags: --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host
  
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
  
      # Get Git Commit Hash conditionally
      - name: Get Git Commit Hash (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "GIT_HASH=$(git rev-parse --short=9 HEAD)" >> $GITHUB_ENV
  
      - name: Get Git Commit Hash (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $gitHash = (git rev-parse --short=9 HEAD).Trim()
          Add-Content -Path $env:GITHUB_ENV -Value "GIT_HASH=$gitHash"
  
      # Get Latest Release Tag conditionally
      - name: Get Latest Release Tag (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          TAG=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          if [[ -z "$TAG" || "$TAG" == "null" ]]; then TAG="latest"; fi
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV
  
      - name: Get Latest Release Tag (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $response = Invoke-WebRequest -Uri "https://api.github.com/repos/${{ github.repository }}/releases/latest" -UseBasicParsing
          $json = $response.Content | ConvertFrom-Json
          $tag = $json.tag_name
          if (-not $tag -or $tag -eq "null") { $tag = "latest" }
          Add-Content -Path $env:GITHUB_ENV -Value "RELEASE_TAG=$tag"
  
      # âœ… Debugging Step (Shell-Specific)
      - name: Debug Print Variables (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          echo "DOCKER_USERNAME: $env:DOCKER_USERNAME"
          echo "GIT_HASH: $env:GIT_HASH"
          echo "RELEASE_TAG: $env:RELEASE_TAG"
  
      - name: Debug Print Variables (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}"
          echo "GIT_HASH=${GIT_HASH}"
          echo "RELEASE_TAG=${RELEASE_TAG}"
  
      # Re-tag dev Docker Images conditionally
      - name: Re-tag dev Docker Image (multi-arch, Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          docker buildx imagetools create \
            --tag ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:$GIT_HASH \
            --tag ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:$RELEASE_TAG \
            ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:dev
  
      - name: Re-tag dev Docker Image (multi-arch, Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $dockerUsername = "${{ secrets.DOCKER_USERNAME }}"
          $gitHash = if ($env:GIT_HASH) { $env:GIT_HASH } else { "latest" }
          $releaseTag = if ($env:RELEASE_TAG) { $env:RELEASE_TAG } else { "latest" }
  
          echo "DOCKER_USERNAME: $dockerUsername"
          echo "GIT_HASH: $gitHash"
          echo "RELEASE_TAG: $releaseTag"
  
          docker buildx imagetools create `
            --tag "$dockerUsername/ebook2audiobook:$gitHash" `
            --tag "$dockerUsername/ebook2audiobook:$releaseTag" `
            "$dockerUsername/ebook2audiobook:dev"
  
