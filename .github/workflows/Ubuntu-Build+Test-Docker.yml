name: Ubuntu Build+Test

on:
  workflow_dispatch:
  release:
    types: [published]
  push:
    branches: [main]
    paths-ignore:
      - 'CODE_OF_CONDUCT.md'
      - 'LICENSE'
      - 'README.md'
      - 'readme/**'
      - 'dockerfiles/**'
      - 'Notebooks/**'

jobs:
  build:
    runs-on: [self-hosted]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get Git Commit Hash
        run: echo "GIT_HASH=$(git rev-parse --short=9 HEAD)" >> $GITHUB_ENV

      - name: Get Latest Release Tag
        id: get_tag
        run: |
          TAG=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV

      - name: Build and Push Dev Docker Image (multi-arch)
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:dev \
            --push .

  test:
    needs: build
    runs-on: [self-hosted]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get Git Commit Hash
        run: echo "GIT_HASH=$(git rev-parse --short=9 HEAD)" >> $GITHUB_ENV

      - name: Get Latest Release Tag
        id: get_tag
        run: |
          TAG=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV

      - name: Help command test
        run: docker run --pull=always athomasson2/ebook2audiobook:dev --help

      - name: English Fairseq headless single test
        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine fairseq

      - name: English Fairseq headless batch test
        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine fairseq

      - name: English Fairseq Custom-Voice headless single test
        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine fairseq --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"

      - name: English Fairseq Custom-Voice headless batch test
        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine fairseq --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"

      - name: Unusual Fairseq headless single test
        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --language urd-script_devanagari --ebook "tools/workflow-testing/test1.txt" --tts_engine fairseq

      - name: Unusual Fairseq headless batch test
        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --language urd-script_devanagari --ebooks_dir "tools/workflow-testing" --tts_engine fairseq

      - name: Unusual Fairseq Custom-Voice headless single test
        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --language urd-script_devanagari --ebook "tools/workflow-testing/test1.txt" --tts_engine fairseq --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"

      - name: Unusual Fairseq Custom-Voice headless batch test
        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --language urd-script_devanagari --ebooks_dir "tools/workflow-testing" --tts_engine fairseq --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"

      - name: English Vits headless single test
        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine vits

      - name: English Vits headless batch test
        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine vits

      - name: English Vits Custom-Voice headless single test
        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine vits --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"

      - name: English Vits Custom-Voice headless batch test
        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine vits --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"

      - name: English Yourtts headless single test
        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine yourtts

      - name: English Yourtts headless batch test
        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine yourtts

      - name: English Yourtts Custom-Voice headless single test
        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine yourtts --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"

      - name: English Yourtts Custom-Voice headless batch test
        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine yourtts --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"

      - name: Default headless single test
        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --ebook "tools/workflow-testing/test1.txt"

      - name: Default xtts headless batch test
        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --ebooks_dir "tools/workflow-testing" --tts_engine xtts

# I need to get these working properly, I need to somehow figure out hwo to get the docker image to create a zip and then run that command

#      - name: Create the custom_xtts_test.zip for headless custom xtts model single test docker run athomasson2/ebook2audiobook:dev
#        run: cp voices/eng/elder/male/DavidAttenborough_24000.wav ref.wav && zip -j custom_xtts_test.zip models/tts/tts_models--multilingual--multi-dataset--xtts_v2/config.json models/tts/tts_models--multilingual--multi-dataset--xtts_v2/model.pth models/tts/tts_models--multilingual--multi-dataset--xtts_v2/vocab.json ref.wav && rm -f ref.wav

#      - name: English xtts headless custom xtts model single test docker run athomasson2/ebook2audiobook:dev
#        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine xtts --custom_model "custom_xtts_test.zip"

#      - name: English xtts headless custom xtts model batch test docker run athomasson2/ebook2audiobook:dev
#        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine xtts --custom_model "custom_xtts_test.zip"




      - name: Default xtts headless Custom-Voice single test
        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --ebook "tools/workflow-testing/test1.txt" --tts_engine xtts --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"

      - name: Default xtts headless Custom-Voice batch test
        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --ebooks_dir "tools/workflow-testing" --tts_engine xtts --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"

      - name: English xtts headless fine-tuned xtts model single test
        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine xtts --fine_tuned AiExplained

      - name: English xtts headless fine-tuned xtts model batch test
        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine xtts --fine_tuned AiExplained

      - name: English Bark headless single test
        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine bark
# Batch Bark Test takes too long
#      - name: English Bark headless batch test
#        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine bark

      - name: English Bark Custom-Voice headless single test
        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine bark --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"
# Batch Bark Test takes too long
#      - name: English Bark Custom-Voice headless batch test
#        run: docker run athomasson2/ebook2audiobook:dev --headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine bark --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"

      - name: Wipe all dangling docker images
        run: docker image prune -f

  final_push:
    needs: test
    runs-on: [self-hosted]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get Git Commit Hash
        run: echo "GIT_HASH=$(git rev-parse --short=9 HEAD)" >> $GITHUB_ENV

      - name: Get Latest Release Tag
        id: get_tag
        run: |
          TAG=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV

      - name: Build and Push Release Docker Images (multi-arch)
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:latest \
            -t ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:$GIT_HASH \
            -t ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:$RELEASE_TAG \
            --push .

  huggingface:
    needs: final_push
    runs-on: [self-hosted]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get Git Commit Hash
        run: echo "GIT_HASH=$(git rev-parse --short=9 HEAD)" >> $GITHUB_ENV

      - name: Get Latest Release Tag
        id: get_tag
        run: |
          TAG=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV

      - name: Build and Push Huggingface Docker Image (x86 only)
        run: |
          docker buildx build --platform linux/amd64 \
            -f dockerfiles/HuggingfaceDockerfile \
            -t ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:HuggingfaceSpace \
            --push .
