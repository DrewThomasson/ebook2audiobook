name: mini Ubuntu Build+Test

on:
  workflow_dispatch: {}
  release:
    types:
      - published
  push:
    branches:
      - main
    paths-ignore:
      - CODE_OF_CONDUCT.md
      - LICENSE
      - README.md
      - readme/**
      - dockerfiles/**
      - Notebooks/**

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker Buildx conditionally based on OS:
      - name: Set up Docker Buildx (Windows)
        if: runner.os == 'Windows'
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker Buildx (Unix)
        if: runner.os != 'Windows'
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          buildkitd-flags: --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Get Git Commit Hash for Linux/macOS
      - name: Get Git Commit Hash (Unix)
        if: runner.os != 'Windows'
        run: echo "GIT_HASH=$(git rev-parse --short=9 HEAD)" >> $GITHUB_ENV

      # Get Git Commit Hash for Windows using PowerShell
      - name: Get Git Commit Hash (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $gitHash = (git rev-parse --short=9 HEAD).Trim()
          Add-Content -Path $env:GITHUB_ENV -Value "GIT_HASH=$gitHash"

      # Get Latest Release Tag for Linux/macOS
      - name: Get Latest Release Tag (Unix)
        if: runner.os != 'Windows'
        id: get_tag
        run: |
          TAG=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV

      # Get Latest Release Tag for Windows using PowerShell
      - name: Get Latest Release Tag (Windows)
        if: runner.os == 'Windows'
        id: get_tag_win
        shell: powershell
        run: |
          $response = Invoke-WebRequest -Uri "https://api.github.com/repos/${{ github.repository }}/releases/latest" -UseBasicParsing
          $json = $response.Content | ConvertFrom-Json
          $tag = $json.tag_name
          Add-Content -Path $env:GITHUB_ENV -Value "RELEASE_TAG=$tag"


  final_push:
    needs:
      - build
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker Buildx conditionally
      - name: Set up Docker Buildx (Windows)
        if: runner.os == 'Windows'
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker Buildx (Unix)
        if: runner.os != 'Windows'
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          buildkitd-flags: --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Get Git Commit Hash conditionally
      - name: Get Git Commit Hash (Unix)
        if: runner.os != 'Windows'
        run: echo "GIT_HASH=$(git rev-parse --short=9 HEAD)" >> $GITHUB_ENV

      - name: Get Git Commit Hash (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $gitHash = (git rev-parse --short=9 HEAD).Trim()
          Add-Content -Path $env:GITHUB_ENV -Value "GIT_HASH=$gitHash"

      # Get Latest Release Tag conditionally
      - name: Get Latest Release Tag (Unix)
        if: runner.os != 'Windows'
        id: get_tag
        run: |
          TAG=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV

      - name: Get Latest Release Tag (Windows)
        if: runner.os == 'Windows'
        id: get_tag_win
        shell: powershell
        run: |
          $response = Invoke-WebRequest -Uri "https://api.github.com/repos/${{ github.repository }}/releases/latest" -UseBasicParsing
          $json = $response.Content | ConvertFrom-Json
          $tag = $json.tag_name
          Add-Content -Path $env:GITHUB_ENV -Value "RELEASE_TAG=$tag"

      # Re-tag dev Docker Images conditionally
      - name: Re-tag dev Docker Image (multi-arch, Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          docker buildx imagetools create \
            --tag ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:$GIT_HASH \
            --tag ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:$RELEASE_TAG \
            ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:dev

      - name: Re-tag dev Docker Image (multi-arch, Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          docker buildx imagetools create `
            --tag $env:DOCKER_USERNAME/ebook2audiobook:$env:GIT_HASH `
            --tag $env:DOCKER_USERNAME/ebook2audiobook:$env:RELEASE_TAG `
            $env:DOCKER_USERNAME/ebook2audiobook:dev






  huggingface:
    needs:
      - build
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker Buildx conditionally
      - name: Set up Docker Buildx (Windows)
        if: runner.os == 'Windows'
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker Buildx (Unix)
        if: runner.os != 'Windows'
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          buildkitd-flags: --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Get Git Commit Hash conditionally
      - name: Get Git Commit Hash (Unix)
        if: runner.os != 'Windows'
        run: echo "GIT_HASH=$(git rev-parse --short=9 HEAD)" >> $GITHUB_ENV

      - name: Get Git Commit Hash (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $gitHash = (git rev-parse --short=9 HEAD).Trim()
          Add-Content -Path $env:GITHUB_ENV -Value "GIT_HASH=$gitHash"

      # Get Latest Release Tag conditionally
      - name: Get Latest Release Tag (Unix)
        if: runner.os != 'Windows'
        id: get_tag
        run: |
          TAG=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV

      - name: Get Latest Release Tag (Windows)
        if: runner.os == 'Windows'
        id: get_tag_win
        shell: powershell
        run: |
          $response = Invoke-WebRequest -Uri "https://api.github.com/repos/${{ github.repository }}/releases/latest" -UseBasicParsing
          $json = $response.Content | ConvertFrom-Json
          $tag = $json.tag_name
          Add-Content -Path $env:GITHUB_ENV -Value "RELEASE_TAG=$tag"

      # Build and Push Huggingface Docker Image (x86 only)
      - name: Build and Push Huggingface Docker Image (x86 only, Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          docker buildx build --platform linux/amd64 \
            -f dockerfiles/HuggingfaceDockerfile \
            -t ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:HuggingfaceSpace \
            --push .

      - name: Build and Push Huggingface Docker Image (x86 only, Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: docker buildx build --platform linux/amd64 `
            -f dockerfiles/HuggingfaceDockerfile `
            -t ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:HuggingfaceSpace `
            --push .
